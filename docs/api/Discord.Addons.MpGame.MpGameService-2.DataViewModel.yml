### YamlMime:ManagedReference
items:
- uid: Discord.Addons.MpGame.MpGameService`2.DataViewModel
  commentId: T:Discord.Addons.MpGame.MpGameService`2.DataViewModel
  id: MpGameService`2.DataViewModel
  parent: Discord.Addons.MpGame
  children:
  - Discord.Addons.MpGame.MpGameService`2.DataViewModel.Game
  - Discord.Addons.MpGame.MpGameService`2.DataViewModel.GameInProgress
  - Discord.Addons.MpGame.MpGameService`2.DataViewModel.JoinedUsers
  - Discord.Addons.MpGame.MpGameService`2.DataViewModel.OpenToJoin
  - Discord.Addons.MpGame.MpGameService`2.DataViewModel.Player
  langs:
  - csharp
  - vb
  name: MpGameService<TGame, TPlayer>.DataViewModel
  nameWithType: MpGameService<TGame, TPlayer>.DataViewModel
  fullName: Discord.Addons.MpGame.MpGameService<TGame, TPlayer>.DataViewModel
  type: Class
  source:
    remote:
      path: src/Discord.Addons.MpGame/Services/PersistentGameData.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: DataViewModel
    path: ../src/Discord.Addons.MpGame/Services/PersistentGameData.cs
    startLine: 68
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  syntax:
    content: public sealed class DataViewModel
    content.vb: Public NotInheritable Class DataViewModel
  inheritance:
  - System.Object
  nameWithType.vb: MpGameService(Of TGame, TPlayer).DataViewModel
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: Discord.Addons.MpGame.MpGameService(Of TGame, TPlayer).DataViewModel
  name.vb: MpGameService(Of TGame, TPlayer).DataViewModel
- uid: Discord.Addons.MpGame.MpGameService`2.DataViewModel.OpenToJoin
  commentId: P:Discord.Addons.MpGame.MpGameService`2.DataViewModel.OpenToJoin
  id: OpenToJoin
  parent: Discord.Addons.MpGame.MpGameService`2.DataViewModel
  langs:
  - csharp
  - vb
  name: OpenToJoin
  nameWithType: MpGameService<TGame, TPlayer>.DataViewModel.OpenToJoin
  fullName: Discord.Addons.MpGame.MpGameService<TGame, TPlayer>.DataViewModel.OpenToJoin
  type: Property
  source:
    remote:
      path: src/Discord.Addons.MpGame/Services/PersistentGameData.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: OpenToJoin
    path: ../src/Discord.Addons.MpGame/Services/PersistentGameData.cs
    startLine: 72
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  syntax:
    content: public bool OpenToJoin { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property OpenToJoin As Boolean
  overload: Discord.Addons.MpGame.MpGameService`2.DataViewModel.OpenToJoin*
  nameWithType.vb: MpGameService(Of TGame, TPlayer).DataViewModel.OpenToJoin
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Discord.Addons.MpGame.MpGameService(Of TGame, TPlayer).DataViewModel.OpenToJoin
- uid: Discord.Addons.MpGame.MpGameService`2.DataViewModel.Game
  commentId: P:Discord.Addons.MpGame.MpGameService`2.DataViewModel.Game
  id: Game
  parent: Discord.Addons.MpGame.MpGameService`2.DataViewModel
  langs:
  - csharp
  - vb
  name: Game
  nameWithType: MpGameService<TGame, TPlayer>.DataViewModel.Game
  fullName: Discord.Addons.MpGame.MpGameService<TGame, TPlayer>.DataViewModel.Game
  type: Property
  source:
    remote:
      path: src/Discord.Addons.MpGame/Services/PersistentGameData.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: Game
    path: ../src/Discord.Addons.MpGame/Services/PersistentGameData.cs
    startLine: 73
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  syntax:
    content: public TGame Game { get; }
    parameters: []
    return:
      type: '{TGame}'
    content.vb: Public ReadOnly Property Game As TGame
  overload: Discord.Addons.MpGame.MpGameService`2.DataViewModel.Game*
  nameWithType.vb: MpGameService(Of TGame, TPlayer).DataViewModel.Game
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Discord.Addons.MpGame.MpGameService(Of TGame, TPlayer).DataViewModel.Game
- uid: Discord.Addons.MpGame.MpGameService`2.DataViewModel.Player
  commentId: P:Discord.Addons.MpGame.MpGameService`2.DataViewModel.Player
  id: Player
  parent: Discord.Addons.MpGame.MpGameService`2.DataViewModel
  langs:
  - csharp
  - vb
  name: Player
  nameWithType: MpGameService<TGame, TPlayer>.DataViewModel.Player
  fullName: Discord.Addons.MpGame.MpGameService<TGame, TPlayer>.DataViewModel.Player
  type: Property
  source:
    remote:
      path: src/Discord.Addons.MpGame/Services/PersistentGameData.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: Player
    path: ../src/Discord.Addons.MpGame/Services/PersistentGameData.cs
    startLine: 74
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  syntax:
    content: public TPlayer Player { get; }
    parameters: []
    return:
      type: '{TPlayer}'
    content.vb: Public ReadOnly Property Player As TPlayer
  overload: Discord.Addons.MpGame.MpGameService`2.DataViewModel.Player*
  nameWithType.vb: MpGameService(Of TGame, TPlayer).DataViewModel.Player
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Discord.Addons.MpGame.MpGameService(Of TGame, TPlayer).DataViewModel.Player
- uid: Discord.Addons.MpGame.MpGameService`2.DataViewModel.GameInProgress
  commentId: P:Discord.Addons.MpGame.MpGameService`2.DataViewModel.GameInProgress
  id: GameInProgress
  parent: Discord.Addons.MpGame.MpGameService`2.DataViewModel
  langs:
  - csharp
  - vb
  name: GameInProgress
  nameWithType: MpGameService<TGame, TPlayer>.DataViewModel.GameInProgress
  fullName: Discord.Addons.MpGame.MpGameService<TGame, TPlayer>.DataViewModel.GameInProgress
  type: Property
  source:
    remote:
      path: src/Discord.Addons.MpGame/Services/PersistentGameData.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: GameInProgress
    path: ../src/Discord.Addons.MpGame/Services/PersistentGameData.cs
    startLine: 75
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  syntax:
    content: public CurrentlyPlaying GameInProgress { get; }
    parameters: []
    return:
      type: Discord.Addons.MpGame.CurrentlyPlaying
    content.vb: Public ReadOnly Property GameInProgress As CurrentlyPlaying
  overload: Discord.Addons.MpGame.MpGameService`2.DataViewModel.GameInProgress*
  nameWithType.vb: MpGameService(Of TGame, TPlayer).DataViewModel.GameInProgress
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Discord.Addons.MpGame.MpGameService(Of TGame, TPlayer).DataViewModel.GameInProgress
- uid: Discord.Addons.MpGame.MpGameService`2.DataViewModel.JoinedUsers
  commentId: P:Discord.Addons.MpGame.MpGameService`2.DataViewModel.JoinedUsers
  id: JoinedUsers
  parent: Discord.Addons.MpGame.MpGameService`2.DataViewModel
  langs:
  - csharp
  - vb
  name: JoinedUsers
  nameWithType: MpGameService<TGame, TPlayer>.DataViewModel.JoinedUsers
  fullName: Discord.Addons.MpGame.MpGameService<TGame, TPlayer>.DataViewModel.JoinedUsers
  type: Property
  source:
    remote:
      path: src/Discord.Addons.MpGame/Services/PersistentGameData.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: JoinedUsers
    path: ../src/Discord.Addons.MpGame/Services/PersistentGameData.cs
    startLine: 76
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  syntax:
    content: public IReadOnlyCollection<IUser> JoinedUsers { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.IUser}
    content.vb: Public ReadOnly Property JoinedUsers As IReadOnlyCollection(Of IUser)
  overload: Discord.Addons.MpGame.MpGameService`2.DataViewModel.JoinedUsers*
  nameWithType.vb: MpGameService(Of TGame, TPlayer).DataViewModel.JoinedUsers
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Discord.Addons.MpGame.MpGameService(Of TGame, TPlayer).DataViewModel.JoinedUsers
references:
- uid: Discord.Addons.MpGame
  commentId: N:Discord.Addons.MpGame
  isExternal: false
  name: Discord.Addons.MpGame
  nameWithType: Discord.Addons.MpGame
  fullName: Discord.Addons.MpGame
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Addons.MpGame.MpGameService`2.DataViewModel.OpenToJoin*
  commentId: Overload:Discord.Addons.MpGame.MpGameService`2.DataViewModel.OpenToJoin
  isExternal: false
  name: OpenToJoin
  nameWithType: MpGameService<TGame, TPlayer>.DataViewModel.OpenToJoin
  fullName: Discord.Addons.MpGame.MpGameService<TGame, TPlayer>.DataViewModel.OpenToJoin
  nameWithType.vb: MpGameService(Of TGame, TPlayer).DataViewModel.OpenToJoin
  fullName.vb: Discord.Addons.MpGame.MpGameService(Of TGame, TPlayer).DataViewModel.OpenToJoin
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Addons.MpGame.MpGameService`2.DataViewModel.Game*
  commentId: Overload:Discord.Addons.MpGame.MpGameService`2.DataViewModel.Game
  isExternal: false
  name: Game
  nameWithType: MpGameService<TGame, TPlayer>.DataViewModel.Game
  fullName: Discord.Addons.MpGame.MpGameService<TGame, TPlayer>.DataViewModel.Game
  nameWithType.vb: MpGameService(Of TGame, TPlayer).DataViewModel.Game
  fullName.vb: Discord.Addons.MpGame.MpGameService(Of TGame, TPlayer).DataViewModel.Game
- uid: '{TGame}'
  commentId: '!:TGame'
  definition: TGame
  name: TGame
  nameWithType: TGame
  fullName: TGame
- uid: TGame
  isExternal: false
  name: TGame
  nameWithType: TGame
  fullName: TGame
- uid: Discord.Addons.MpGame.MpGameService`2.DataViewModel.Player*
  commentId: Overload:Discord.Addons.MpGame.MpGameService`2.DataViewModel.Player
  isExternal: false
  name: Player
  nameWithType: MpGameService<TGame, TPlayer>.DataViewModel.Player
  fullName: Discord.Addons.MpGame.MpGameService<TGame, TPlayer>.DataViewModel.Player
  nameWithType.vb: MpGameService(Of TGame, TPlayer).DataViewModel.Player
  fullName.vb: Discord.Addons.MpGame.MpGameService(Of TGame, TPlayer).DataViewModel.Player
- uid: '{TPlayer}'
  commentId: '!:TPlayer'
  definition: TPlayer
  name: TPlayer
  nameWithType: TPlayer
  fullName: TPlayer
- uid: TPlayer
  isExternal: false
  name: TPlayer
  nameWithType: TPlayer
  fullName: TPlayer
- uid: Discord.Addons.MpGame.MpGameService`2.DataViewModel.GameInProgress*
  commentId: Overload:Discord.Addons.MpGame.MpGameService`2.DataViewModel.GameInProgress
  isExternal: false
  name: GameInProgress
  nameWithType: MpGameService<TGame, TPlayer>.DataViewModel.GameInProgress
  fullName: Discord.Addons.MpGame.MpGameService<TGame, TPlayer>.DataViewModel.GameInProgress
  nameWithType.vb: MpGameService(Of TGame, TPlayer).DataViewModel.GameInProgress
  fullName.vb: Discord.Addons.MpGame.MpGameService(Of TGame, TPlayer).DataViewModel.GameInProgress
- uid: Discord.Addons.MpGame.CurrentlyPlaying
  commentId: T:Discord.Addons.MpGame.CurrentlyPlaying
  parent: Discord.Addons.MpGame
  isExternal: false
  name: CurrentlyPlaying
  nameWithType: CurrentlyPlaying
  fullName: Discord.Addons.MpGame.CurrentlyPlaying
- uid: Discord.Addons.MpGame.MpGameService`2.DataViewModel.JoinedUsers*
  commentId: Overload:Discord.Addons.MpGame.MpGameService`2.DataViewModel.JoinedUsers
  isExternal: false
  name: JoinedUsers
  nameWithType: MpGameService<TGame, TPlayer>.DataViewModel.JoinedUsers
  fullName: Discord.Addons.MpGame.MpGameService<TGame, TPlayer>.DataViewModel.JoinedUsers
  nameWithType.vb: MpGameService(Of TGame, TPlayer).DataViewModel.JoinedUsers
  fullName.vb: Discord.Addons.MpGame.MpGameService(Of TGame, TPlayer).DataViewModel.JoinedUsers
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.IUser}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.IUser}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<IUser>
  nameWithType: IReadOnlyCollection<IUser>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.IUser>
  nameWithType.vb: IReadOnlyCollection(Of IUser)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.IUser)
  name.vb: IReadOnlyCollection(Of IUser)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
