### YamlMime:ManagedReference
items:
- uid: Discord.Addons.MpGame.Player
  commentId: T:Discord.Addons.MpGame.Player
  id: Player
  parent: Discord.Addons.MpGame
  children:
  - Discord.Addons.MpGame.Player.#ctor(Discord.IUser,Discord.IMessageChannel)
  - Discord.Addons.MpGame.Player.SendMessageAsync(System.String,Discord.Embed)
  - Discord.Addons.MpGame.Player.ShouldKick(System.Int32)
  - Discord.Addons.MpGame.Player.User
  langs:
  - csharp
  - vb
  name: Player
  nameWithType: Player
  fullName: Discord.Addons.MpGame.Player
  type: Class
  source:
    remote:
      path: src/Discord.Addons.MpGame/Models/Player.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: Player
    path: ../src/Discord.Addons.MpGame/Models/Player.cs
    startLine: 10
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'Represents a Discord user as a Player '
  example: []
  syntax:
    content: public class Player
    content.vb: Public Class Player
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Addons.MpGame.Player.#ctor(Discord.IUser,Discord.IMessageChannel)
  commentId: M:Discord.Addons.MpGame.Player.#ctor(Discord.IUser,Discord.IMessageChannel)
  id: '#ctor(Discord.IUser,Discord.IMessageChannel)'
  parent: Discord.Addons.MpGame.Player
  langs:
  - csharp
  - vb
  name: Player(IUser, IMessageChannel)
  nameWithType: Player.Player(IUser, IMessageChannel)
  fullName: Discord.Addons.MpGame.Player.Player(Discord.IUser, Discord.IMessageChannel)
  type: Constructor
  source:
    remote:
      path: src/Discord.Addons.MpGame/Models/Player.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: .ctor
    path: ../src/Discord.Addons.MpGame/Models/Player.cs
    startLine: 17
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'Creates a <xref href="Discord.Addons.MpGame.Player" data-throw-if-not-resolved="false"></xref> out of an <xref href="Discord.IUser" data-throw-if-not-resolved="false"></xref>. '
  example: []
  syntax:
    content: public Player(IUser user, IMessageChannel channel)
    parameters:
    - id: user
      type: Discord.IUser
      description: The user represented.
    - id: channel
      type: Discord.IMessageChannel
      description: The channel where this game is played.
    content.vb: Public Sub New(user As IUser, channel As IMessageChannel)
  overload: Discord.Addons.MpGame.Player.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Addons.MpGame.Player.User
  commentId: P:Discord.Addons.MpGame.Player.User
  id: User
  parent: Discord.Addons.MpGame.Player
  langs:
  - csharp
  - vb
  name: User
  nameWithType: Player.User
  fullName: Discord.Addons.MpGame.Player.User
  type: Property
  source:
    remote:
      path: src/Discord.Addons.MpGame/Models/Player.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: User
    path: ../src/Discord.Addons.MpGame/Models/Player.cs
    startLine: 24
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'The underlying <xref href="Discord.IUser" data-throw-if-not-resolved="false"></xref> instance. '
  example: []
  syntax:
    content: public IUser User { get; }
    parameters: []
    return:
      type: Discord.IUser
    content.vb: Public ReadOnly Property User As IUser
  overload: Discord.Addons.MpGame.Player.User*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Addons.MpGame.Player.SendMessageAsync(System.String,Discord.Embed)
  commentId: M:Discord.Addons.MpGame.Player.SendMessageAsync(System.String,Discord.Embed)
  id: SendMessageAsync(System.String,Discord.Embed)
  parent: Discord.Addons.MpGame.Player
  langs:
  - csharp
  - vb
  name: SendMessageAsync(String, Embed)
  nameWithType: Player.SendMessageAsync(String, Embed)
  fullName: Discord.Addons.MpGame.Player.SendMessageAsync(System.String, Discord.Embed)
  type: Method
  source:
    remote:
      path: src/Discord.Addons.MpGame/Models/Player.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: SendMessageAsync
    path: ../src/Discord.Addons.MpGame/Models/Player.cs
    startLine: 37
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: "Sends a message to this <xref href=\"Discord.Addons.MpGame.Player\" data-throw-if-not-resolved=\"false\"></xref>&apos;s DM Channel\nand will cache the message if the user has DMs disabled. "
  example: []
  syntax:
    content: public Task<IUserMessage> SendMessageAsync(string text, Embed embed = null)
    parameters:
    - id: text
      type: System.String
      description: The text to send.
    - id: embed
      type: Discord.Embed
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
      description: >-
        The message that is sent, or

        <xref uid="langword_csharp_null" name="null" href=""></xref> if it couldn&apos;t be sent.
    content.vb: Public Function SendMessageAsync(text As String, embed As Embed = Nothing) As Task(Of IUserMessage)
  overload: Discord.Addons.MpGame.Player.SendMessageAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Addons.MpGame.Player.ShouldKick(System.Int32)
  commentId: M:Discord.Addons.MpGame.Player.ShouldKick(System.Int32)
  id: ShouldKick(System.Int32)
  parent: Discord.Addons.MpGame.Player
  langs:
  - csharp
  - vb
  name: ShouldKick(Int32)
  nameWithType: Player.ShouldKick(Int32)
  fullName: Discord.Addons.MpGame.Player.ShouldKick(System.Int32)
  type: Method
  source:
    remote:
      path: src/Discord.Addons.MpGame/Models/Player.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: ShouldKick
    path: ../src/Discord.Addons.MpGame/Models/Player.cs
    startLine: 72
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: "Can be overriden to determine if\na player should be kicked for not\nhaving DMs enabled for too long. "
  remarks: >-
    <div class="markdown level0 remarks"><div class="NOTE">

    <h5>Note</h5><p>The default implementation always

    returns <xref uid="langword_csharp_false" name="false" href=""></xref>.</p></div></div>
  example: []
  syntax:
    content: protected virtual bool ShouldKick(int backstuffedDms)
    parameters:
    - id: backstuffedDms
      type: System.Int32
      description: >-
        The amount of DMs that are

        currently not sent to this player.
    return:
      type: System.Boolean
      description: >-
        <xref uid="langword_csharp_true" name="true" href=""></xref> if the player should be kicked,
            otherwise <xref uid="langword_csharp_false" name="false" href=""></xref>.
    content.vb: Protected Overridable Function ShouldKick(backstuffedDms As Integer) As Boolean
  overload: Discord.Addons.MpGame.Player.ShouldKick*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Discord.Addons.MpGame
  commentId: N:Discord.Addons.MpGame
  isExternal: false
  name: Discord.Addons.MpGame
  nameWithType: Discord.Addons.MpGame
  fullName: Discord.Addons.MpGame
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Addons.MpGame.Player
  commentId: T:Discord.Addons.MpGame.Player
  isExternal: false
  name: Player
  nameWithType: Player
  fullName: Discord.Addons.MpGame.Player
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  isExternal: true
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: Discord.Addons.MpGame.Player.#ctor*
  commentId: Overload:Discord.Addons.MpGame.Player.#ctor
  isExternal: false
  name: Player
  nameWithType: Player.Player
  fullName: Discord.Addons.MpGame.Player.Player
- uid: Discord.IMessageChannel
  commentId: T:Discord.IMessageChannel
  parent: Discord
  isExternal: true
  name: IMessageChannel
  nameWithType: IMessageChannel
  fullName: Discord.IMessageChannel
- uid: Discord
  commentId: N:Discord
  isExternal: false
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.Addons.MpGame.Player.User*
  commentId: Overload:Discord.Addons.MpGame.Player.User
  isExternal: false
  name: User
  nameWithType: Player.User
  fullName: Discord.Addons.MpGame.Player.User
- uid: Discord.Addons.MpGame.Player.SendMessageAsync*
  commentId: Overload:Discord.Addons.MpGame.Player.SendMessageAsync
  isExternal: false
  name: SendMessageAsync
  nameWithType: Player.SendMessageAsync
  fullName: Discord.Addons.MpGame.Player.SendMessageAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Embed
  commentId: T:Discord.Embed
  parent: Discord
  isExternal: true
  name: Embed
  nameWithType: Embed
  fullName: Discord.Embed
- uid: System.Threading.Tasks.Task{Discord.IUserMessage}
  commentId: T:System.Threading.Tasks.Task{Discord.IUserMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IUserMessage>
  nameWithType: Task<IUserMessage>
  fullName: System.Threading.Tasks.Task<Discord.IUserMessage>
  nameWithType.vb: Task(Of IUserMessage)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IUserMessage)
  name.vb: Task(Of IUserMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.Addons.MpGame.Player.ShouldKick*
  commentId: Overload:Discord.Addons.MpGame.Player.ShouldKick
  isExternal: false
  name: ShouldKick
  nameWithType: Player.ShouldKick
  fullName: Discord.Addons.MpGame.Player.ShouldKick
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
