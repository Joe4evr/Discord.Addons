### YamlMime:ManagedReference
items:
- uid: Discord.Addons.MpGame.MpGameModuleBase`3
  commentId: T:Discord.Addons.MpGame.MpGameModuleBase`3
  id: MpGameModuleBase`3
  parent: Discord.Addons.MpGame
  children:
  - Discord.Addons.MpGame.MpGameModuleBase`3.#ctor(`0)
  - Discord.Addons.MpGame.MpGameModuleBase`3.BeforeExecute(Discord.Commands.CommandInfo)
  - Discord.Addons.MpGame.MpGameModuleBase`3.CancelGameCmd
  - Discord.Addons.MpGame.MpGameModuleBase`3.EndGameCmd
  - Discord.Addons.MpGame.MpGameModuleBase`3.Game
  - Discord.Addons.MpGame.MpGameModuleBase`3.GameInProgress
  - Discord.Addons.MpGame.MpGameModuleBase`3.GameService
  - Discord.Addons.MpGame.MpGameModuleBase`3.GameStateCmd
  - Discord.Addons.MpGame.MpGameModuleBase`3.JoinedUsers
  - Discord.Addons.MpGame.MpGameModuleBase`3.JoinGameCmd
  - Discord.Addons.MpGame.MpGameModuleBase`3.LeaveGameCmd
  - Discord.Addons.MpGame.MpGameModuleBase`3.NextTurnCmd
  - Discord.Addons.MpGame.MpGameModuleBase`3.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  - Discord.Addons.MpGame.MpGameModuleBase`3.OpenGameCmd
  - Discord.Addons.MpGame.MpGameModuleBase`3.OpenToJoin
  - Discord.Addons.MpGame.MpGameModuleBase`3.Player
  - Discord.Addons.MpGame.MpGameModuleBase`3.RegisterPlayerTypeReader
  - Discord.Addons.MpGame.MpGameModuleBase`3.ResendCmd
  - Discord.Addons.MpGame.MpGameModuleBase`3.StartGameCmd
  langs:
  - csharp
  - vb
  name: MpGameModuleBase<TService, TGame, TPlayer>
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>
  type: Class
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/Readers/PlayerTypeReader.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: MpGameModuleBase
    path: ../src/Discord.Addons.MpGame/Modules/Readers/PlayerTypeReader.cs
    startLine: 9
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'Base class to manage a game between Discord users. '
  example: []
  syntax:
    content: 'public abstract class MpGameModuleBase<TService, TGame, TPlayer> : ModuleBase<SocketCommandContext>, IModuleBase where TService : MpGameService<TGame, TPlayer> where TGame : GameBase<TPlayer> where TPlayer : Player'
    typeParameters:
    - id: TService
      description: The type of the service managing longer lived objects.
    - id: TGame
      description: The type of game to manage.
    - id: TPlayer
      description: The type of the <xref href="Discord.Addons.MpGame.MpGameModuleBase%603.Player" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      Public MustInherit Class MpGameModuleBase(Of TService As MpGameService(Of TGame, TPlayer), TGame As GameBase(Of TPlayer), TPlayer As Player)
          Inherits ModuleBase(Of SocketCommandContext)
          Implements IModuleBase
  inheritance:
  - System.Object
  - Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}
  inheritedMembers:
  - Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  - Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}.Context
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer)
  name.vb: MpGameModuleBase(Of TService, TGame, TPlayer)
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.GameService
  commentId: P:Discord.Addons.MpGame.MpGameModuleBase`3.GameService
  id: GameService
  parent: Discord.Addons.MpGame.MpGameModuleBase`3
  langs:
  - csharp
  - vb
  name: GameService
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.GameService
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.GameService
  type: Property
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: GameService
    path: ../src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
    startLine: 20
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'The GameService instance. '
  example: []
  syntax:
    content: protected TService GameService { get; }
    parameters: []
    return:
      type: '{TService}'
    content.vb: Protected ReadOnly Property GameService As TService
  overload: Discord.Addons.MpGame.MpGameModuleBase`3.GameService*
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).GameService
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).GameService
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.#ctor(`0)
  commentId: M:Discord.Addons.MpGame.MpGameModuleBase`3.#ctor(`0)
  id: '#ctor(`0)'
  parent: Discord.Addons.MpGame.MpGameModuleBase`3
  langs:
  - csharp
  - vb
  name: MpGameModuleBase(TService)
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.MpGameModuleBase(TService)
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.MpGameModuleBase(TService)
  type: Constructor
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: .ctor
    path: ../src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
    startLine: 24
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'Initializes the <xref href="Discord.Addons.MpGame.MpGameModuleBase%603" data-throw-if-not-resolved="false"></xref> base class. '
  example: []
  syntax:
    content: protected MpGameModuleBase(TService gameService)
    parameters:
    - id: gameService
      type: '{TService}'
      description: ''
    content.vb: Protected Sub New(gameService As TService)
  overload: Discord.Addons.MpGame.MpGameModuleBase`3.#ctor*
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).MpGameModuleBase(TService)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).MpGameModuleBase(TService)
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.Game
  commentId: P:Discord.Addons.MpGame.MpGameModuleBase`3.Game
  id: Game
  parent: Discord.Addons.MpGame.MpGameModuleBase`3
  langs:
  - csharp
  - vb
  name: Game
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.Game
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.Game
  type: Property
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: Game
    path: ../src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
    startLine: 31
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'The instance of the game being played (if active). '
  example: []
  syntax:
    content: protected TGame Game { get; }
    parameters: []
    return:
      type: '{TGame}'
    content.vb: Protected ReadOnly Property Game As TGame
  overload: Discord.Addons.MpGame.MpGameModuleBase`3.Game*
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).Game
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).Game
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.Player
  commentId: P:Discord.Addons.MpGame.MpGameModuleBase`3.Player
  id: Player
  parent: Discord.Addons.MpGame.MpGameModuleBase`3
  langs:
  - csharp
  - vb
  name: Player
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.Player
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.Player
  type: Property
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: Player
    path: ../src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
    startLine: 35
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: "The player object that wraps the user executing this command\n(if a game is active AND the user is a player in that game). "
  example: []
  syntax:
    content: protected TPlayer Player { get; }
    parameters: []
    return:
      type: '{TPlayer}'
    content.vb: Protected ReadOnly Property Player As TPlayer
  overload: Discord.Addons.MpGame.MpGameModuleBase`3.Player*
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).Player
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).Player
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.GameInProgress
  commentId: P:Discord.Addons.MpGame.MpGameModuleBase`3.GameInProgress
  id: GameInProgress
  parent: Discord.Addons.MpGame.MpGameModuleBase`3
  langs:
  - csharp
  - vb
  name: GameInProgress
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.GameInProgress
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.GameInProgress
  type: Property
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: GameInProgress
    path: ../src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
    startLine: 38
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'Determines if a game in the current channel is in progress or not. '
  example: []
  syntax:
    content: protected CurrentlyPlaying GameInProgress { get; }
    parameters: []
    return:
      type: Discord.Addons.MpGame.CurrentlyPlaying
    content.vb: Protected ReadOnly Property GameInProgress As CurrentlyPlaying
  overload: Discord.Addons.MpGame.MpGameModuleBase`3.GameInProgress*
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).GameInProgress
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).GameInProgress
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.OpenToJoin
  commentId: P:Discord.Addons.MpGame.MpGameModuleBase`3.OpenToJoin
  id: OpenToJoin
  parent: Discord.Addons.MpGame.MpGameModuleBase`3
  langs:
  - csharp
  - vb
  name: OpenToJoin
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.OpenToJoin
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.OpenToJoin
  type: Property
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: OpenToJoin
    path: ../src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
    startLine: 41
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'Determines if a game in the current channel is open to join or not. '
  example: []
  syntax:
    content: protected bool OpenToJoin { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected ReadOnly Property OpenToJoin As Boolean
  overload: Discord.Addons.MpGame.MpGameModuleBase`3.OpenToJoin*
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).OpenToJoin
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).OpenToJoin
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.JoinedUsers
  commentId: P:Discord.Addons.MpGame.MpGameModuleBase`3.JoinedUsers
  id: JoinedUsers
  parent: Discord.Addons.MpGame.MpGameModuleBase`3
  langs:
  - csharp
  - vb
  name: JoinedUsers
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.JoinedUsers
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.JoinedUsers
  type: Property
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: JoinedUsers
    path: ../src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
    startLine: 47
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'The list of users ready to play. '
  remarks: >-
    <div class="markdown level0 remarks"><div class="NOTE">

    <h5>Note</h5><p>This is an immutable snapshot, it is not

    updated until the *next* command invocation.</p></div></div>
  example: []
  syntax:
    content: protected IReadOnlyCollection<IUser> JoinedUsers { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.IUser}
    content.vb: Protected ReadOnly Property JoinedUsers As IReadOnlyCollection(Of IUser)
  overload: Discord.Addons.MpGame.MpGameModuleBase`3.JoinedUsers*
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).JoinedUsers
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).JoinedUsers
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.BeforeExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Addons.MpGame.MpGameModuleBase`3.BeforeExecute(Discord.Commands.CommandInfo)
  id: BeforeExecute(Discord.Commands.CommandInfo)
  parent: Discord.Addons.MpGame.MpGameModuleBase`3
  langs:
  - csharp
  - vb
  name: BeforeExecute(CommandInfo)
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.BeforeExecute(CommandInfo)
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.BeforeExecute(Discord.Commands.CommandInfo)
  type: Method
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: BeforeExecute
    path: ../src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
    startLine: 50
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'Initialize fields whose values come from the <code data-dev-comment-type="typeparamref" class="typeparamref">TService</code>&apos;s Dictionaries. '
  example: []
  syntax:
    content: protected override void BeforeExecute(CommandInfo command)
    parameters:
    - id: command
      type: Discord.Commands.CommandInfo
    content.vb: Protected Overrides Sub BeforeExecute(command As CommandInfo)
  overridden: Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}.BeforeExecute(Discord.Commands.CommandInfo)
  overload: Discord.Addons.MpGame.MpGameModuleBase`3.BeforeExecute*
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).BeforeExecute(CommandInfo)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).BeforeExecute(Discord.Commands.CommandInfo)
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.RegisterPlayerTypeReader
  commentId: P:Discord.Addons.MpGame.MpGameModuleBase`3.RegisterPlayerTypeReader
  id: RegisterPlayerTypeReader
  parent: Discord.Addons.MpGame.MpGameModuleBase`3
  langs:
  - csharp
  - vb
  name: RegisterPlayerTypeReader
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.RegisterPlayerTypeReader
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.RegisterPlayerTypeReader
  type: Property
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: RegisterPlayerTypeReader
    path: ../src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
    startLine: 64
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: >-
    Override this to return <xref uid="langword_csharp_false" name="false" href=""></xref> if you don&apos;t

    want to register a type reader for the <code data-dev-comment-type="typeparamref" class="typeparamref">TPlayer</code> type.
  example: []
  syntax:
    content: protected virtual bool RegisterPlayerTypeReader { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Overridable ReadOnly Property RegisterPlayerTypeReader As Boolean
  overload: Discord.Addons.MpGame.MpGameModuleBase`3.RegisterPlayerTypeReader*
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).RegisterPlayerTypeReader
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).RegisterPlayerTypeReader
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  commentId: M:Discord.Addons.MpGame.MpGameModuleBase`3.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  id: OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  parent: Discord.Addons.MpGame.MpGameModuleBase`3
  langs:
  - csharp
  - vb
  name: OnModuleBuilding(CommandService, ModuleBuilder)
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.OnModuleBuilding(CommandService, ModuleBuilder)
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  type: Method
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: OnModuleBuilding
    path: ../src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
    startLine: 67
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  example: []
  syntax:
    content: protected override void OnModuleBuilding(CommandService commandService, ModuleBuilder builder)
    parameters:
    - id: commandService
      type: Discord.Commands.CommandService
    - id: builder
      type: Discord.Commands.Builders.ModuleBuilder
    content.vb: Protected Overrides Sub OnModuleBuilding(commandService As CommandService, builder As ModuleBuilder)
  overridden: Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  overload: Discord.Addons.MpGame.MpGameModuleBase`3.OnModuleBuilding*
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).OnModuleBuilding(CommandService, ModuleBuilder)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.OpenGameCmd
  commentId: M:Discord.Addons.MpGame.MpGameModuleBase`3.OpenGameCmd
  id: OpenGameCmd
  parent: Discord.Addons.MpGame.MpGameModuleBase`3
  langs:
  - csharp
  - vb
  name: OpenGameCmd()
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.OpenGameCmd()
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.OpenGameCmd()
  type: Method
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: OpenGameCmd
    path: ../src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
    startLine: 99
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'Command to open a game for others to join. '
  example:
  - >-
    <pre><code>[Command(&quot;opengame&quot;)]
        public override async Task OpenGameCmd()
        {
            if (OpenToJoin)
            {
                await ReplyAsync(&quot;There is already a game open to join.&quot;).ConfigureAwait(false);
            }
            else if (GameInProgress != CurrentlyPlaying.None)
            {
                await ReplyAsync(&quot;Another game already in progress.&quot;).ConfigureAwait(false);
            }
            else
            {
                if (await GameService.OpenNewGame(Context).ConfigureAwait(false))
                {
                    await ReplyAsync(&quot;Opening for a game.&quot;).ConfigureAwait(false);
                }
            }
        }</code></pre>
  syntax:
    content: public abstract Task OpenGameCmd()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public MustOverride Function OpenGameCmd As Task
  overload: Discord.Addons.MpGame.MpGameModuleBase`3.OpenGameCmd*
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).OpenGameCmd()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).OpenGameCmd()
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.JoinGameCmd
  commentId: M:Discord.Addons.MpGame.MpGameModuleBase`3.JoinGameCmd
  id: JoinGameCmd
  parent: Discord.Addons.MpGame.MpGameModuleBase`3
  langs:
  - csharp
  - vb
  name: JoinGameCmd()
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.JoinGameCmd()
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.JoinGameCmd()
  type: Method
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: JoinGameCmd
    path: ../src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
    startLine: 122
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'Command to join a game that is open. '
  example:
  - >-
    <pre><code>[Command(&quot;join&quot;)]
        public override async Task JoinGameCmd()
        {
            if (Game != null)
            {
                await ReplyAsync(&quot;Cannot join a game already in progress.&quot;).ConfigureAwait(false);
            }
            else if (!OpenToJoin)
            {
                await ReplyAsync(&quot;No game open to join.&quot;).ConfigureAwait(false);
            }
            else
            {
                if (await GameService.AddUser(Context.Channel, Context.User).ConfigureAwait(false))
                {
                    await ReplyAsync($&quot;**{Context.User.Username}** has joined.&quot;).ConfigureAwait(false);
                }
            }
        }</code></pre>
  syntax:
    content: public abstract Task JoinGameCmd()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public MustOverride Function JoinGameCmd As Task
  overload: Discord.Addons.MpGame.MpGameModuleBase`3.JoinGameCmd*
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).JoinGameCmd()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).JoinGameCmd()
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.LeaveGameCmd
  commentId: M:Discord.Addons.MpGame.MpGameModuleBase`3.LeaveGameCmd
  id: LeaveGameCmd
  parent: Discord.Addons.MpGame.MpGameModuleBase`3
  langs:
  - csharp
  - vb
  name: LeaveGameCmd()
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.LeaveGameCmd()
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.LeaveGameCmd()
  type: Method
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: LeaveGameCmd
    path: ../src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
    startLine: 145
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'Command to leave a game that is not yet started. '
  example:
  - >-
    <pre><code>[Command(&quot;leave&quot;)]
        public override async Task LeaveGameCmd()
        {
            if (Game != null)
            {
                await ReplyAsync(&quot;Cannot leave a game already in progress.&quot;).ConfigureAwait(false);
            }
            else if (!OpenToJoin)
            {
                await ReplyAsync(&quot;No game open to leave.&quot;).ConfigureAwait(false);
            }
            else
            {
                if (await GameService.RemoveUser(Context.Channel, Context.User))
                {
                    await ReplyAsync($&quot;**{Context.User.Username}** has left.&quot;).ConfigureAwait(false);
                }
            }
        }</code></pre>
  syntax:
    content: public abstract Task LeaveGameCmd()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public MustOverride Function LeaveGameCmd As Task
  overload: Discord.Addons.MpGame.MpGameModuleBase`3.LeaveGameCmd*
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).LeaveGameCmd()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).LeaveGameCmd()
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.CancelGameCmd
  commentId: M:Discord.Addons.MpGame.MpGameModuleBase`3.CancelGameCmd
  id: CancelGameCmd
  parent: Discord.Addons.MpGame.MpGameModuleBase`3
  langs:
  - csharp
  - vb
  name: CancelGameCmd()
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.CancelGameCmd()
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.CancelGameCmd()
  type: Method
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: CancelGameCmd
    path: ../src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
    startLine: 168
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'Command to cancel a game before it started. '
  example:
  - >-
    <pre><code>[Command(&quot;cancel&quot;)]
        public override async Task CancelGameCmd()
        {
            if (Game != null)
            {
                await ReplyAsync(&quot;Cannot cancel a game already in progress.&quot;).ConfigureAwait(false);
            }
            else if (!OpenToJoin)
            {
                await ReplyAsync(&quot;No game open to cancel.&quot;).ConfigureAwait(false);
            }
            else
            {
                if (await GameService.CancelGame(Context.Channel))
                {
                    await ReplyAsync(&quot;Game was canceled.&quot;).ConfigureAwait(false);
                }
            }
        }</code></pre>
  syntax:
    content: public abstract Task CancelGameCmd()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public MustOverride Function CancelGameCmd As Task
  overload: Discord.Addons.MpGame.MpGameModuleBase`3.CancelGameCmd*
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).CancelGameCmd()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).CancelGameCmd()
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.StartGameCmd
  commentId: M:Discord.Addons.MpGame.MpGameModuleBase`3.StartGameCmd
  id: StartGameCmd
  parent: Discord.Addons.MpGame.MpGameModuleBase`3
  langs:
  - csharp
  - vb
  name: StartGameCmd()
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.StartGameCmd()
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.StartGameCmd()
  type: Method
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: StartGameCmd
    path: ../src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
    startLine: 203
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'Command to start a game with the players who joined. '
  example:
  - >-
    <pre><code>[Command(&quot;start&quot;)]
        public override async Task StartGameCmd()
        {
            if (Game != null)
            {
                await ReplyAsync(&quot;Another game already in progress.&quot;).ConfigureAwait(false);
            }
            else if (!OpenToJoin)
            {
                await ReplyAsync(&quot;No game has been opened at this time.&quot;).ConfigureAwait(false);
            }
            else if (JoinedUsers.Count &lt; 2) // Example value if a game has a minimum player requirement
            {
                await ReplyAsync(&quot;Not enough players have joined.&quot;).ConfigureAwait(false);
            }
            else
            {
                if (GameService.TryUpdateOpenToJoin(Context.Channel, newValue: false, comparisonValue: true))
                {
                    // Tip: Shuffle the players before projecting them
                    var players = JoinedUsers.Select(u => new ExamplePlayer(u, Context.Channel));
                    // The Player class can also be extended for additional properties
                    var game = new ExampleGame(Context.Channel, players);
                    if (await GameService.TryAddNewGame(Context.Channel, game).ConfigureAwait(false))
                    {
                        await game.SetupGame().ConfigureAwait(false);
                        await game.StartGame().ConfigureAwait(false);
                    }
                }
            }
        }</code></pre>
  syntax:
    content: public abstract Task StartGameCmd()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public MustOverride Function StartGameCmd As Task
  overload: Discord.Addons.MpGame.MpGameModuleBase`3.StartGameCmd*
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).StartGameCmd()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).StartGameCmd()
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.NextTurnCmd
  commentId: M:Discord.Addons.MpGame.MpGameModuleBase`3.NextTurnCmd
  id: NextTurnCmd
  parent: Discord.Addons.MpGame.MpGameModuleBase`3
  langs:
  - csharp
  - vb
  name: NextTurnCmd()
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.NextTurnCmd()
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.NextTurnCmd()
  type: Method
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: NextTurnCmd
    path: ../src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
    startLine: 214
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'Command to advance to the next turn (if applicable). '
  example:
  - >-
    <pre><code>[Command(&quot;turn&quot;)]
        public override Task NextTurnCmd()
            => (Game != null)
                ? Game.NextTurn()
                : (GameInProgress == CurrentlyPlaying.DifferentGame)
                    ? ReplyAsync(&quot;Different game in progress.&quot;)
                    : ReplyAsync(&quot;No game in progress.&quot;);</code></pre>
  syntax:
    content: public abstract Task NextTurnCmd()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public MustOverride Function NextTurnCmd As Task
  overload: Discord.Addons.MpGame.MpGameModuleBase`3.NextTurnCmd*
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).NextTurnCmd()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).NextTurnCmd()
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.GameStateCmd
  commentId: M:Discord.Addons.MpGame.MpGameModuleBase`3.GameStateCmd
  id: GameStateCmd
  parent: Discord.Addons.MpGame.MpGameModuleBase`3
  langs:
  - csharp
  - vb
  name: GameStateCmd()
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.GameStateCmd()
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.GameStateCmd()
  type: Method
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: GameStateCmd
    path: ../src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
    startLine: 226
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'Command to display the current state of the game. '
  example:
  - >-
    <pre><code>[Command(&quot;state&quot;)]
        public override Task GameStateCmd()
            => (Game != null)
                ? ReplyAsync(Game.GetGameState())
                //Alternatively: ReplyAsync(&quot;&quot;, embed: Game.GetGameStateEmbed())
                : (GameInProgress == CurrentlyPlaying.DifferentGame)
                    ? ReplyAsync(&quot;Different game in progress.&quot;)
                    : ReplyAsync(&quot;No game in progress.&quot;);</code></pre>
  syntax:
    content: public abstract Task GameStateCmd()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public MustOverride Function GameStateCmd As Task
  overload: Discord.Addons.MpGame.MpGameModuleBase`3.GameStateCmd*
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).GameStateCmd()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).GameStateCmd()
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.EndGameCmd
  commentId: M:Discord.Addons.MpGame.MpGameModuleBase`3.EndGameCmd
  id: EndGameCmd
  parent: Discord.Addons.MpGame.MpGameModuleBase`3
  langs:
  - csharp
  - vb
  name: EndGameCmd()
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.EndGameCmd()
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.EndGameCmd()
  type: Method
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: EndGameCmd
    path: ../src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
    startLine: 237
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'Command to end a game in progress early. '
  example:
  - >-
    <pre><code>[Command(&quot;end&quot;)] //Should be restricted to mods/admins to prevent abuse
        public override Task EndGameCmd()
            => (Game != null)
                ? Game.EndGame(&quot;Game ended early by moderator.&quot;)
                : GameInProgress == CurrentlyPlaying.DifferentGame
                    ? ReplyAsync(&quot;Different game in progress.&quot;)
                    : ReplyAsync(&quot;No game in progress.&quot;);</code></pre>
  syntax:
    content: public abstract Task EndGameCmd()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public MustOverride Function EndGameCmd As Task
  overload: Discord.Addons.MpGame.MpGameModuleBase`3.EndGameCmd*
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).EndGameCmd()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).EndGameCmd()
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.ResendCmd
  commentId: M:Discord.Addons.MpGame.MpGameModuleBase`3.ResendCmd
  id: ResendCmd
  parent: Discord.Addons.MpGame.MpGameModuleBase`3
  langs:
  - csharp
  - vb
  name: ResendCmd()
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.ResendCmd()
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.ResendCmd()
  type: Method
  source:
    remote:
      path: src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
      branch: master
      repo: git@github.com:Joe4evr/Discord.Addons.git
    id: ResendCmd
    path: ../src/Discord.Addons.MpGame/Modules/MpGameModuleBase.cs
    startLine: 243
  assemblies:
  - Discord.Addons.MpGame
  namespace: Discord.Addons.MpGame
  summary: 'Command to resend a message to someone who had their DMs disabled. '
  example:
  - >-
    <pre><code>[Command(&quot;resend&quot;)]
        public override Task ResendCmd() => base.ResendCmd();</code></pre>
  syntax:
    content: public virtual Task ResendCmd()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function ResendCmd As Task
  overload: Discord.Addons.MpGame.MpGameModuleBase`3.ResendCmd*
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).ResendCmd()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).ResendCmd()
references:
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.Player
  commentId: P:Discord.Addons.MpGame.MpGameModuleBase`3.Player
- uid: Discord.Addons.MpGame
  commentId: N:Discord.Addons.MpGame
  isExternal: false
  name: Discord.Addons.MpGame
  nameWithType: Discord.Addons.MpGame
  fullName: Discord.Addons.MpGame
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}
  commentId: T:Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}
  parent: Discord.Commands
  definition: Discord.Commands.ModuleBase`1
  name: ModuleBase<SocketCommandContext>
  nameWithType: ModuleBase<SocketCommandContext>
  fullName: Discord.Commands.ModuleBase<Discord.Commands.SocketCommandContext>
  nameWithType.vb: ModuleBase(Of SocketCommandContext)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.SocketCommandContext)
  name.vb: ModuleBase(Of SocketCommandContext)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    nameWithType: ModuleBase
    fullName: Discord.Commands.ModuleBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.SocketCommandContext
    name: SocketCommandContext
    nameWithType: SocketCommandContext
    fullName: Discord.Commands.SocketCommandContext
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    nameWithType: ModuleBase
    fullName: Discord.Commands.ModuleBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.SocketCommandContext
    name: SocketCommandContext
    nameWithType: SocketCommandContext
    fullName: Discord.Commands.SocketCommandContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  parent: Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}
  definition: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  name: ReplyAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: ModuleBase<SocketCommandContext>.ReplyAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.SocketCommandContext>.ReplyAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  nameWithType.vb: ModuleBase(Of SocketCommandContext).ReplyAsync(String, Boolean, Embed, RequestOptions)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.SocketCommandContext).ReplyAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: ReplyAsync
    nameWithType: ModuleBase<SocketCommandContext>.ReplyAsync
    fullName: Discord.Commands.ModuleBase<Discord.Commands.SocketCommandContext>.ReplyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: ReplyAsync
    nameWithType: ModuleBase(Of SocketCommandContext).ReplyAsync
    fullName: Discord.Commands.ModuleBase(Of Discord.Commands.SocketCommandContext).ReplyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}
  definition: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  name: AfterExecute(CommandInfo)
  nameWithType: ModuleBase<SocketCommandContext>.AfterExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.SocketCommandContext>.AfterExecute(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of SocketCommandContext).AfterExecute(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.SocketCommandContext).AfterExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    nameWithType: ModuleBase<SocketCommandContext>.AfterExecute
    fullName: Discord.Commands.ModuleBase<Discord.Commands.SocketCommandContext>.AfterExecute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: Discord.Commands.CommandInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    nameWithType: ModuleBase(Of SocketCommandContext).AfterExecute
    fullName: Discord.Commands.ModuleBase(Of Discord.Commands.SocketCommandContext).AfterExecute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: Discord.Commands.CommandInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}.Context
  commentId: P:Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}.Context
  parent: Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}
  definition: Discord.Commands.ModuleBase`1.Context
  name: Context
  nameWithType: ModuleBase<SocketCommandContext>.Context
  fullName: Discord.Commands.ModuleBase<Discord.Commands.SocketCommandContext>.Context
  nameWithType.vb: ModuleBase(Of SocketCommandContext).Context
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.SocketCommandContext).Context
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Commands.ModuleBase`1
  commentId: T:Discord.Commands.ModuleBase`1
  isExternal: true
  name: ModuleBase<T>
  nameWithType: ModuleBase<T>
  fullName: Discord.Commands.ModuleBase<T>
  nameWithType.vb: ModuleBase(Of T)
  fullName.vb: Discord.Commands.ModuleBase(Of T)
  name.vb: ModuleBase(Of T)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    nameWithType: ModuleBase
    fullName: Discord.Commands.ModuleBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    nameWithType: ModuleBase
    fullName: Discord.Commands.ModuleBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands
  commentId: N:Discord.Commands
  isExternal: false
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  isExternal: true
  name: ReplyAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: ModuleBase<T>.ReplyAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.Commands.ModuleBase<T>.ReplyAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  nameWithType.vb: ModuleBase(Of T).ReplyAsync(String, Boolean, Embed, RequestOptions)
  fullName.vb: Discord.Commands.ModuleBase(Of T).ReplyAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: ReplyAsync
    nameWithType: ModuleBase<T>.ReplyAsync
    fullName: Discord.Commands.ModuleBase<T>.ReplyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: ReplyAsync
    nameWithType: ModuleBase(Of T).ReplyAsync
    fullName: Discord.Commands.ModuleBase(Of T).ReplyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  isExternal: true
  name: AfterExecute(CommandInfo)
  nameWithType: ModuleBase<T>.AfterExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.AfterExecute(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).AfterExecute(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).AfterExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    nameWithType: ModuleBase<T>.AfterExecute
    fullName: Discord.Commands.ModuleBase<T>.AfterExecute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: Discord.Commands.CommandInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    nameWithType: ModuleBase(Of T).AfterExecute
    fullName: Discord.Commands.ModuleBase(Of T).AfterExecute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: Discord.Commands.CommandInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.ModuleBase`1.Context
  commentId: P:Discord.Commands.ModuleBase`1.Context
  isExternal: true
  name: Context
  nameWithType: ModuleBase<T>.Context
  fullName: Discord.Commands.ModuleBase<T>.Context
  nameWithType.vb: ModuleBase(Of T).Context
  fullName.vb: Discord.Commands.ModuleBase(Of T).Context
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.GameService*
  commentId: Overload:Discord.Addons.MpGame.MpGameModuleBase`3.GameService
  isExternal: false
  name: GameService
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.GameService
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.GameService
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).GameService
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).GameService
- uid: '{TService}'
  commentId: '!:TService'
  definition: TService
  name: TService
  nameWithType: TService
  fullName: TService
- uid: TService
  isExternal: false
  name: TService
  nameWithType: TService
  fullName: TService
- uid: Discord.Addons.MpGame.MpGameModuleBase`3
  commentId: T:Discord.Addons.MpGame.MpGameModuleBase`3
  isExternal: false
  name: MpGameModuleBase<TService, TGame, TPlayer>
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer)
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer)
  name.vb: MpGameModuleBase(Of TService, TGame, TPlayer)
  spec.csharp:
  - uid: Discord.Addons.MpGame.MpGameModuleBase`3
    name: MpGameModuleBase
    nameWithType: MpGameModuleBase
    fullName: Discord.Addons.MpGame.MpGameModuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TService
    nameWithType: TService
    fullName: TService
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGame
    nameWithType: TGame
    fullName: TGame
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPlayer
    nameWithType: TPlayer
    fullName: TPlayer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Addons.MpGame.MpGameModuleBase`3
    name: MpGameModuleBase
    nameWithType: MpGameModuleBase
    fullName: Discord.Addons.MpGame.MpGameModuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TService
    nameWithType: TService
    fullName: TService
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGame
    nameWithType: TGame
    fullName: TGame
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPlayer
    nameWithType: TPlayer
    fullName: TPlayer
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.#ctor*
  commentId: Overload:Discord.Addons.MpGame.MpGameModuleBase`3.#ctor
  isExternal: false
  name: MpGameModuleBase
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.MpGameModuleBase
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.MpGameModuleBase
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).MpGameModuleBase
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).MpGameModuleBase
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.Game*
  commentId: Overload:Discord.Addons.MpGame.MpGameModuleBase`3.Game
  isExternal: false
  name: Game
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.Game
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.Game
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).Game
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).Game
- uid: '{TGame}'
  commentId: '!:TGame'
  definition: TGame
  name: TGame
  nameWithType: TGame
  fullName: TGame
- uid: TGame
  isExternal: false
  name: TGame
  nameWithType: TGame
  fullName: TGame
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.Player*
  commentId: Overload:Discord.Addons.MpGame.MpGameModuleBase`3.Player
  isExternal: false
  name: Player
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.Player
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.Player
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).Player
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).Player
- uid: '{TPlayer}'
  commentId: '!:TPlayer'
  definition: TPlayer
  name: TPlayer
  nameWithType: TPlayer
  fullName: TPlayer
- uid: TPlayer
  isExternal: false
  name: TPlayer
  nameWithType: TPlayer
  fullName: TPlayer
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.GameInProgress*
  commentId: Overload:Discord.Addons.MpGame.MpGameModuleBase`3.GameInProgress
  isExternal: false
  name: GameInProgress
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.GameInProgress
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.GameInProgress
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).GameInProgress
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).GameInProgress
- uid: Discord.Addons.MpGame.CurrentlyPlaying
  commentId: T:Discord.Addons.MpGame.CurrentlyPlaying
  parent: Discord.Addons.MpGame
  isExternal: false
  name: CurrentlyPlaying
  nameWithType: CurrentlyPlaying
  fullName: Discord.Addons.MpGame.CurrentlyPlaying
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.OpenToJoin*
  commentId: Overload:Discord.Addons.MpGame.MpGameModuleBase`3.OpenToJoin
  isExternal: false
  name: OpenToJoin
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.OpenToJoin
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.OpenToJoin
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).OpenToJoin
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).OpenToJoin
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.JoinedUsers*
  commentId: Overload:Discord.Addons.MpGame.MpGameModuleBase`3.JoinedUsers
  isExternal: false
  name: JoinedUsers
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.JoinedUsers
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.JoinedUsers
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).JoinedUsers
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).JoinedUsers
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.IUser}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.IUser}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<IUser>
  nameWithType: IReadOnlyCollection<IUser>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.IUser>
  nameWithType.vb: IReadOnlyCollection(Of IUser)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.IUser)
  name.vb: IReadOnlyCollection(Of IUser)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}.BeforeExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}.BeforeExecute(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}
  definition: Discord.Commands.ModuleBase`1.BeforeExecute(Discord.Commands.CommandInfo)
  name: BeforeExecute(CommandInfo)
  nameWithType: ModuleBase<SocketCommandContext>.BeforeExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.SocketCommandContext>.BeforeExecute(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of SocketCommandContext).BeforeExecute(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.SocketCommandContext).BeforeExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.BeforeExecute(Discord.Commands.CommandInfo)
    name: BeforeExecute
    nameWithType: ModuleBase<SocketCommandContext>.BeforeExecute
    fullName: Discord.Commands.ModuleBase<Discord.Commands.SocketCommandContext>.BeforeExecute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: Discord.Commands.CommandInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.BeforeExecute(Discord.Commands.CommandInfo)
    name: BeforeExecute
    nameWithType: ModuleBase(Of SocketCommandContext).BeforeExecute
    fullName: Discord.Commands.ModuleBase(Of Discord.Commands.SocketCommandContext).BeforeExecute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: Discord.Commands.CommandInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.BeforeExecute*
  commentId: Overload:Discord.Addons.MpGame.MpGameModuleBase`3.BeforeExecute
  isExternal: false
  name: BeforeExecute
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.BeforeExecute
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.BeforeExecute
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).BeforeExecute
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).BeforeExecute
- uid: Discord.Commands.CommandInfo
  commentId: T:Discord.Commands.CommandInfo
  parent: Discord.Commands
  isExternal: true
  name: CommandInfo
  nameWithType: CommandInfo
  fullName: Discord.Commands.CommandInfo
- uid: Discord.Commands.ModuleBase`1.BeforeExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.BeforeExecute(Discord.Commands.CommandInfo)
  isExternal: true
  name: BeforeExecute(CommandInfo)
  nameWithType: ModuleBase<T>.BeforeExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.BeforeExecute(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).BeforeExecute(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).BeforeExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.BeforeExecute(Discord.Commands.CommandInfo)
    name: BeforeExecute
    nameWithType: ModuleBase<T>.BeforeExecute
    fullName: Discord.Commands.ModuleBase<T>.BeforeExecute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: Discord.Commands.CommandInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.BeforeExecute(Discord.Commands.CommandInfo)
    name: BeforeExecute
    nameWithType: ModuleBase(Of T).BeforeExecute
    fullName: Discord.Commands.ModuleBase(Of T).BeforeExecute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: Discord.Commands.CommandInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.RegisterPlayerTypeReader*
  commentId: Overload:Discord.Addons.MpGame.MpGameModuleBase`3.RegisterPlayerTypeReader
  isExternal: false
  name: RegisterPlayerTypeReader
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.RegisterPlayerTypeReader
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.RegisterPlayerTypeReader
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).RegisterPlayerTypeReader
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).RegisterPlayerTypeReader
- uid: Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  parent: Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}
  definition: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  name: OnModuleBuilding(CommandService, ModuleBuilder)
  nameWithType: ModuleBase<SocketCommandContext>.OnModuleBuilding(CommandService, ModuleBuilder)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.SocketCommandContext>.OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  nameWithType.vb: ModuleBase(Of SocketCommandContext).OnModuleBuilding(CommandService, ModuleBuilder)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.SocketCommandContext).OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    nameWithType: ModuleBase<SocketCommandContext>.OnModuleBuilding
    fullName: Discord.Commands.ModuleBase<Discord.Commands.SocketCommandContext>.OnModuleBuilding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    nameWithType: CommandService
    fullName: Discord.Commands.CommandService
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    nameWithType: ModuleBuilder
    fullName: Discord.Commands.Builders.ModuleBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    nameWithType: ModuleBase(Of SocketCommandContext).OnModuleBuilding
    fullName: Discord.Commands.ModuleBase(Of Discord.Commands.SocketCommandContext).OnModuleBuilding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    nameWithType: CommandService
    fullName: Discord.Commands.CommandService
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    nameWithType: ModuleBuilder
    fullName: Discord.Commands.Builders.ModuleBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.OnModuleBuilding*
  commentId: Overload:Discord.Addons.MpGame.MpGameModuleBase`3.OnModuleBuilding
  isExternal: false
  name: OnModuleBuilding
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.OnModuleBuilding
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.OnModuleBuilding
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).OnModuleBuilding
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).OnModuleBuilding
- uid: Discord.Commands.CommandService
  commentId: T:Discord.Commands.CommandService
  parent: Discord.Commands
  isExternal: true
  name: CommandService
  nameWithType: CommandService
  fullName: Discord.Commands.CommandService
- uid: Discord.Commands.Builders.ModuleBuilder
  commentId: T:Discord.Commands.Builders.ModuleBuilder
  parent: Discord.Commands.Builders
  isExternal: true
  name: ModuleBuilder
  nameWithType: ModuleBuilder
  fullName: Discord.Commands.Builders.ModuleBuilder
- uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  commentId: M:Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  isExternal: true
  name: OnModuleBuilding(CommandService, ModuleBuilder)
  nameWithType: ModuleBase<T>.OnModuleBuilding(CommandService, ModuleBuilder)
  fullName: Discord.Commands.ModuleBase<T>.OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  nameWithType.vb: ModuleBase(Of T).OnModuleBuilding(CommandService, ModuleBuilder)
  fullName.vb: Discord.Commands.ModuleBase(Of T).OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    nameWithType: ModuleBase<T>.OnModuleBuilding
    fullName: Discord.Commands.ModuleBase<T>.OnModuleBuilding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    nameWithType: CommandService
    fullName: Discord.Commands.CommandService
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    nameWithType: ModuleBuilder
    fullName: Discord.Commands.Builders.ModuleBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    nameWithType: ModuleBase(Of T).OnModuleBuilding
    fullName: Discord.Commands.ModuleBase(Of T).OnModuleBuilding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    nameWithType: CommandService
    fullName: Discord.Commands.CommandService
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    nameWithType: ModuleBuilder
    fullName: Discord.Commands.Builders.ModuleBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.Builders
  commentId: N:Discord.Commands.Builders
  isExternal: false
  name: Discord.Commands.Builders
  nameWithType: Discord.Commands.Builders
  fullName: Discord.Commands.Builders
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.OpenGameCmd*
  commentId: Overload:Discord.Addons.MpGame.MpGameModuleBase`3.OpenGameCmd
  isExternal: false
  name: OpenGameCmd
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.OpenGameCmd
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.OpenGameCmd
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).OpenGameCmd
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).OpenGameCmd
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.JoinGameCmd*
  commentId: Overload:Discord.Addons.MpGame.MpGameModuleBase`3.JoinGameCmd
  isExternal: false
  name: JoinGameCmd
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.JoinGameCmd
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.JoinGameCmd
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).JoinGameCmd
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).JoinGameCmd
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.LeaveGameCmd*
  commentId: Overload:Discord.Addons.MpGame.MpGameModuleBase`3.LeaveGameCmd
  isExternal: false
  name: LeaveGameCmd
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.LeaveGameCmd
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.LeaveGameCmd
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).LeaveGameCmd
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).LeaveGameCmd
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.CancelGameCmd*
  commentId: Overload:Discord.Addons.MpGame.MpGameModuleBase`3.CancelGameCmd
  isExternal: false
  name: CancelGameCmd
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.CancelGameCmd
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.CancelGameCmd
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).CancelGameCmd
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).CancelGameCmd
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.StartGameCmd*
  commentId: Overload:Discord.Addons.MpGame.MpGameModuleBase`3.StartGameCmd
  isExternal: false
  name: StartGameCmd
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.StartGameCmd
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.StartGameCmd
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).StartGameCmd
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).StartGameCmd
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.NextTurnCmd*
  commentId: Overload:Discord.Addons.MpGame.MpGameModuleBase`3.NextTurnCmd
  isExternal: false
  name: NextTurnCmd
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.NextTurnCmd
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.NextTurnCmd
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).NextTurnCmd
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).NextTurnCmd
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.GameStateCmd*
  commentId: Overload:Discord.Addons.MpGame.MpGameModuleBase`3.GameStateCmd
  isExternal: false
  name: GameStateCmd
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.GameStateCmd
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.GameStateCmd
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).GameStateCmd
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).GameStateCmd
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.EndGameCmd*
  commentId: Overload:Discord.Addons.MpGame.MpGameModuleBase`3.EndGameCmd
  isExternal: false
  name: EndGameCmd
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.EndGameCmd
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.EndGameCmd
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).EndGameCmd
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).EndGameCmd
- uid: Discord.Addons.MpGame.MpGameModuleBase`3.ResendCmd*
  commentId: Overload:Discord.Addons.MpGame.MpGameModuleBase`3.ResendCmd
  isExternal: false
  name: ResendCmd
  nameWithType: MpGameModuleBase<TService, TGame, TPlayer>.ResendCmd
  fullName: Discord.Addons.MpGame.MpGameModuleBase<TService, TGame, TPlayer>.ResendCmd
  nameWithType.vb: MpGameModuleBase(Of TService, TGame, TPlayer).ResendCmd
  fullName.vb: Discord.Addons.MpGame.MpGameModuleBase(Of TService, TGame, TPlayer).ResendCmd
